from _typeshed import Incomplete
from collections.abc import Generator

def full_name(func): ...

class Constant(tuple):
    def __new__(cls, name): ...

DBNAME: str
ENOVAL: Incomplete
UNKNOWN: Incomplete
MODE_NONE: int
MODE_RAW: int
MODE_BINARY: int
MODE_TEXT: int
MODE_PICKLE: int
DEFAULT_SETTINGS: Incomplete
METADATA: Incomplete
EVICTION_POLICY: Incomplete

class Disk:
    min_file_size: Incomplete
    pickle_protocol: Incomplete
    def __init__(
        self, directory, min_file_size: int = 0, pickle_protocol: int = 0
    ) -> None: ...
    def hash(self, key): ...
    def put(self, key): ...
    def get(self, key, raw): ...
    def store(self, value, read, key=...): ...
    def fetch(self, mode, filename, value, read): ...
    def filename(self, key=..., value=...): ...
    def remove(self, file_path) -> None: ...

class JSONDisk(Disk):
    compress_level: Incomplete
    def __init__(self, directory, compress_level: int = 1, **kwargs) -> None: ...
    def put(self, key): ...
    def get(self, key, raw): ...
    def store(self, value, read, key=...): ...
    def fetch(self, mode, filename, value, read): ...

class Timeout(Exception): ...
class UnknownFileWarning(UserWarning): ...
class EmptyDirWarning(UserWarning): ...

def args_to_key(base, args, kwargs, typed, ignore): ...

class Cache:
    def __init__(
        self,
        directory: Incomplete | None = None,
        timeout: int = 60,
        disk=...,
        **settings,
    ) -> None: ...
    @property
    def directory(self): ...
    @property
    def timeout(self): ...
    @property
    def disk(self): ...
    def transact(self, retry: bool = False) -> Generator[None, None, None]: ...
    def set(
        self,
        key,
        value,
        expire: Incomplete | None = None,
        read: bool = False,
        tag: Incomplete | None = None,
        retry: bool = False,
    ): ...
    def __setitem__(self, key, value) -> None: ...
    def touch(self, key, expire: Incomplete | None = None, retry: bool = False): ...
    def add(
        self,
        key,
        value,
        expire: Incomplete | None = None,
        read: bool = False,
        tag: Incomplete | None = None,
        retry: bool = False,
    ): ...
    def incr(self, key, delta: int = 1, default: int = 0, retry: bool = False): ...
    def decr(self, key, delta: int = 1, default: int = 0, retry: bool = False): ...
    def get(
        self,
        key,
        default: Incomplete | None = None,
        read: bool = False,
        expire_time: bool = False,
        tag: bool = False,
        retry: bool = False,
    ): ...
    def __getitem__(self, key): ...
    def read(self, key, retry: bool = False): ...
    def __contains__(self, key) -> bool: ...
    def pop(
        self,
        key,
        default: Incomplete | None = None,
        expire_time: bool = False,
        tag: bool = False,
        retry: bool = False,
    ): ...
    def __delitem__(self, key, retry: bool = True) -> None: ...
    def delete(self, key, retry: bool = False): ...
    def push(
        self,
        value,
        prefix: Incomplete | None = None,
        side: str = "back",
        expire: Incomplete | None = None,
        read: bool = False,
        tag: Incomplete | None = None,
        retry: bool = False,
    ): ...
    def pull(
        self,
        prefix: Incomplete | None = None,
        default=(None, None),
        side: str = "front",
        expire_time: bool = False,
        tag: bool = False,
        retry: bool = False,
    ): ...
    def peek(
        self,
        prefix: Incomplete | None = None,
        default=(None, None),
        side: str = "front",
        expire_time: bool = False,
        tag: bool = False,
        retry: bool = False,
    ): ...
    def peekitem(
        self,
        last: bool = True,
        expire_time: bool = False,
        tag: bool = False,
        retry: bool = False,
    ): ...
    def memoize(
        self,
        name: Incomplete | None = None,
        typed: bool = False,
        expire: Incomplete | None = None,
        tag: Incomplete | None = None,
        ignore=(),
    ): ...
    def check(self, fix: bool = False, retry: bool = False): ...
    def create_tag_index(self) -> None: ...
    def drop_tag_index(self) -> None: ...
    def evict(self, tag, retry: bool = False): ...
    def expire(self, now: Incomplete | None = None, retry: bool = False): ...
    def cull(self, retry: bool = False): ...
    def clear(self, retry: bool = False): ...
    def iterkeys(self, reverse: bool = False) -> Generator[Incomplete, None, None]: ...
    def __iter__(self): ...
    def __reversed__(self): ...
    def stats(self, enable: bool = True, reset: bool = False): ...
    def volume(self): ...
    def close(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *exception) -> None: ...
    def __len__(self) -> int: ...
    def reset(self, key, value=..., update: bool = True): ...
