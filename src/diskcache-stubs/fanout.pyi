from .core import (
    Cache as Cache,
    DEFAULT_SETTINGS as DEFAULT_SETTINGS,
    Disk as Disk,
    ENOVAL as ENOVAL,
    Timeout as Timeout,
)
from .persistent import Deque as Deque, Index as Index
from _typeshed import Incomplete
from collections.abc import Generator

class FanoutCache:
    def __init__(
        self,
        directory: Incomplete | None = None,
        shards: int = 8,
        timeout: float = 0.01,
        disk=...,
        **settings,
    ) -> None: ...
    @property
    def directory(self): ...
    def __getattr__(self, name): ...
    def transact(self, retry: bool = True) -> Generator[None, None, None]: ...
    def set(
        self,
        key,
        value,
        expire: Incomplete | None = None,
        read: bool = False,
        tag: Incomplete | None = None,
        retry: bool = False,
    ): ...
    def __setitem__(self, key, value) -> None: ...
    def touch(self, key, expire: Incomplete | None = None, retry: bool = False): ...
    def add(
        self,
        key,
        value,
        expire: Incomplete | None = None,
        read: bool = False,
        tag: Incomplete | None = None,
        retry: bool = False,
    ): ...
    def incr(self, key, delta: int = 1, default: int = 0, retry: bool = False): ...
    def decr(self, key, delta: int = 1, default: int = 0, retry: bool = False): ...
    def get(
        self,
        key,
        default: Incomplete | None = None,
        read: bool = False,
        expire_time: bool = False,
        tag: bool = False,
        retry: bool = False,
    ): ...
    def __getitem__(self, key): ...
    def read(self, key): ...
    def __contains__(self, key) -> bool: ...
    def pop(
        self,
        key,
        default: Incomplete | None = None,
        expire_time: bool = False,
        tag: bool = False,
        retry: bool = False,
    ): ...
    def delete(self, key, retry: bool = False): ...
    def __delitem__(self, key) -> None: ...
    def check(self, fix: bool = False, retry: bool = False): ...
    def expire(self, retry: bool = False): ...
    def create_tag_index(self) -> None: ...
    def drop_tag_index(self) -> None: ...
    def evict(self, tag, retry: bool = False): ...
    def cull(self, retry: bool = False): ...
    def clear(self, retry: bool = False): ...
    def stats(self, enable: bool = True, reset: bool = False): ...
    def volume(self): ...
    def close(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *exception) -> None: ...
    def __iter__(self): ...
    def __reversed__(self): ...
    def __len__(self) -> int: ...
    def reset(self, key, value=...): ...
    def cache(
        self, name, timeout: int = 60, disk: Incomplete | None = None, **settings
    ): ...
    def deque(self, name, maxlen: Incomplete | None = None): ...
    def index(self, name): ...
